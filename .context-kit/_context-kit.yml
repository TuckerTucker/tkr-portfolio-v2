# Project configuration for AI agents - tkr-portfolio-v2
# Modern portfolio website showcasing product design work through detailed case studies
meta:
  project: tkr-portfolio-v2
  fmt: 15
  type: portfolio-website
  desc: "Modern, minimal portfolio website showcasing product design work through detailed case studies with focus on performance, accessibility, and thoughtful design"
  ver: "1.0.0"
  author: "Tucker github.com/tuckertucker"
  ts: "2025-10-22"
  status: production-deployed
  entry: "npm run dev"
  stack: &tech-stack "React 18 + TypeScript + Vite + React Router + Tailwind CSS 3 + Shadcn/ui + Tweakcn CSS + OKLCH Color Space"
  cmds: ["npm run dev", "npm run build", "npm run preview", "npm run lint"]
  domain: "tucker.sh"
  achievements: ["Production deployed to GitHub Pages", "Custom domain (tucker.sh)", "3 detailed case studies", "OKLCH color system", "Full dark mode support", "142KB gzipped bundle", "Type-safe TypeScript", "WCAG accessible components"]

# Dependencies - Production portfolio stack
deps: &deps
  js: &js-deps
    prod:
      # React ecosystem
      react: {id: "/facebook/react", v: "^18.2.0"}
      react-dom: {id: "/facebook/react", v: "^18.2.0"}
      react-router-dom: {id: "/remix-run/react-router", v: "^6.21.0"}

      # UI Components & Styling
      "@radix-ui/react-scroll-area": {id: "/radix-ui/primitives", v: "^1.2.10"}
      "@radix-ui/react-separator": {id: "/radix-ui/primitives", v: "^1.1.7"}
      "@radix-ui/react-slot": {id: "/radix-ui/primitives", v: "^1.2.3"}
      lucide-react: {id: "/lucide-icons/lucide", v: "^0.294.0"}

      # Styling utilities
      tailwindcss: {id: "/tailwindlabs/tailwindcss", v: "^3.4.18"}
      tailwindcss-animate: {id: "not found", v: "^1.0.7"}
      tailwind-merge: {id: "not found", v: "^2.6.0"}
      clsx: {id: "not found", v: "^2.1.1"}
      class-variance-authority: {id: "not found", v: "^0.7.1"}

      # Theme management
      next-themes: {id: "not found", v: "^0.2.1"}

      # Build tooling
      autoprefixer: {id: "/postcss/autoprefixer", v: "^10.4.21"}
      postcss: {id: "/postcss/postcss", v: "^8.5.6"}

    dev:
      # TypeScript ecosystem
      typescript: {id: "/microsoft/TypeScript", v: "^5.2.2"}
      "@types/react": {id: "/DefinitelyTyped/DefinitelyTyped", v: "^18.2.43"}
      "@types/react-dom": {id: "/DefinitelyTyped/DefinitelyTyped", v: "^18.2.17"}

      # Build tools
      vite: {id: "/vitejs/vite", v: "^5.0.8"}
      "@vitejs/plugin-react": {id: "/vitejs/vite-plugin-react", v: "^4.2.1"}

      # Linting
      eslint: {id: "/eslint/eslint", v: "^8.55.0"}
      "@typescript-eslint/eslint-plugin": {id: "/typescript-eslint/typescript-eslint", v: "^6.14.0"}
      "@typescript-eslint/parser": {id: "/typescript-eslint/typescript-eslint", v: "^6.14.0"}
      "eslint-plugin-react-hooks": {id: "not found", v: "^4.6.0"}
      "eslint-plugin-react-refresh": {id: "not found", v: "^0.4.5"}

# Project structure - Portfolio implementation (34 source files)
struct:
  _: {n: 34, t: {ts: 12, tsx: 20, css: 2}, desc: "Source files only (excluding config/build)"}

  src:
    _: {n: 34, desc: "All application source code"}

    # Application entry points
    main.tsx: {desc: "Application entry point with React 18 StrictMode"}
    App.tsx: {desc: "Root component with React Router and ThemeProvider"}
    index.css: {desc: "Global styles and Tailwind imports"}

    # Routing and pages
    pages:
      _: {n: 4, t: {tsx: 4}, desc: "Route components for main pages"}
      files: [Home.tsx, ContextKit.tsx, Docusearch.tsx, Kanban.tsx]
      routes: ["/", "/context-kit", "/docusearch", "/kanban"]

    # Components - Organized by purpose
    components:
      _: {n: 19, t: {tsx: 18, ts: 1}, desc: "Reusable UI components"}

      layout:
        _: {n: 3, desc: "Layout components - header, footer, theme"}
        files: [Header.tsx, Footer.tsx, ThemeToggle.tsx]

      sections:
        _: {n: 4, desc: "Home page sections"}
        files: [Hero.tsx, About.tsx, FeaturedProjects.tsx, ProjectCard.tsx]

      case-studies:
        _: {n: 7, desc: "Case study display components"}
        files: [
          CaseStudyLayout.tsx,
          ProjectMetadata.tsx,
          ProblemSection.tsx,
          UnderstandingSection.tsx,
          SolutionSection.tsx,
          ImpactSection.tsx,
          index.ts
        ]

      ui:
        _: {n: 4, desc: "Shadcn/ui component library"}
        files: [button.tsx, card.tsx, scroll-area.tsx, separator.tsx]
        source: "Shadcn/ui built on Radix UI primitives"

    # Content - Data-driven case studies
    content:
      _: {n: 5, t: {ts: 5}, desc: "Content data and type definitions"}

      case-studies:
        _: {n: 3, desc: "Case study content data"}
        files: [docusearch.ts, context-kit.ts, kanban.ts]
        structure: "Problem → Understanding → Solution → Impact"

      projects.ts: {desc: "Featured project metadata and navigation"}
      work-history.ts: {desc: "Professional experience timeline"}
      types.ts: {desc: "TypeScript interfaces for content"}

    # Utilities and providers
    lib:
      utils.ts: {desc: "Tailwind cn() utility for className merging"}

    providers:
      ThemeProvider.tsx: {desc: "Dark mode theme context using next-themes"}

    # Design system
    styles:
      tweakcn.css: {desc: "Tweakcn CSS design tokens in OKLCH color space"}

  # Configuration files
  config:
    _: {desc: "Build and development configuration"}
    files:
      - vite.config.ts: "Vite build configuration"
      - tailwind.config.ts: "Tailwind CSS configuration"
      - tsconfig.json: "TypeScript compiler configuration"
      - tsconfig.node.json: "TypeScript config for Node.js tools"
      - postcss.config.js: "PostCSS plugins (Tailwind + Autoprefixer)"
      - components.json: "Shadcn/ui component configuration"
      - package.json: "Dependencies and scripts"
      - index.html: "HTML entry point"

  # Deployment infrastructure
  deployment:
    _: {desc: "GitHub Actions deployment to GitHub Pages"}
    ".github/workflows/deploy.yml": "Automated build and deploy on push to main"
    "public/CNAME": "Custom domain configuration (tucker.sh)"

  # Development infrastructure
  ".context-kit":
    _: {desc: "AI agent configuration and project documentation"}
    _context-kit.yml: "This file - AI-optimized project context"

# Case Studies - Featured work
content:
  case_studies:
    docusearch:
      title: "DocuSearch"
      tagline: "Designing Transparency into RAG Systems"
      category: "AI UX Innovation"
      priority: primary
      route: "/docusearch"
      elevator_pitch: "Dual-interface RAG system where humans browse documents visually while AI agents search semantically—both working with the same transparent, file-native architecture"
      problem: "Most RAG systems make uploaded documents invisible - need transparency for both humans and AI"
      solution: "File-native architecture with dual interfaces: visual browser for humans, semantic search for AI"
      skills: [Dual Interface Design, Agent Experience Research, Multi-modal Architecture, React 19, Python, FastAPI, ColPali, ChromaDB]

    context_kit:
      title: "tkr-context-kit"
      tagline: "Designing Context Architecture for AI Agents"
      category: "AGx Design Methodology"
      priority: secondary
      route: "/context-kit"
      elevator_pitch: "Context architecture system that front-loads comprehensive project knowledge to AI agents through YAML semantic anchors, reducing context discovery overhead by 70%"
      problem: "AI agents waste time re-discovering project structure in every conversation"
      solution: "YAML-based context architecture with semantic anchors for upfront comprehensive knowledge"
      skills: [Agent Experience Research, Information Architecture, YAML Schema Design, Service-Oriented Architecture, TypeScript, React 19, ReactFlow, SQLite, MCP]

    kanban:
      title: "TaskBoardAI"
      tagline: "Kanban Board for Human-AI Collaboration"
      category: "Dual Interface Design"
      priority: tertiary
      route: "/kanban"
      elevator_pitch: "File-based kanban system where humans use visual boards and AI agents read/write JSON—both working with identical task data"
      problem: "Managing tasks in markdown is version-controllable but lacks visual kanban benefits"
      solution: "Dual interface: drag-and-drop kanban for humans, structured JSON for AI agents"
      skills: [Dual Interface Design, File-based Architecture, MCP Integration, User Research, Node.js, Express, Vanilla JavaScript]

# Tweakcn CSS Design System - OKLCH Color Space
design:
  system: "Tweakcn CSS"
  format: "CSS Custom Properties with OKLCH color space"
  version: "1.0.0"

  tokens:
    colors:
      _: {format: "oklch(lightness chroma hue)", desc: "Perceptually uniform color space"}

      light:
        background: {val: "oklch(1.0000 0 0)", desc: "Pure white background"}
        foreground: {val: "oklch(0.3211 0 0)", desc: "Near-black text"}
        primary: {val: "oklch(0.6231 0.1880 259.8145)", desc: "Purple/indigo accent"}
        primary-foreground: {val: "oklch(1.0000 0 0)", desc: "White on primary"}
        secondary: {val: "oklch(0.9670 0.0029 264.5419)", desc: "Light gray"}
        muted: {val: "oklch(0.9846 0.0017 247.8389)", desc: "Very light gray"}
        accent: {val: "oklch(0.9514 0.0250 236.8242)", desc: "Subtle accent"}
        destructive: {val: "oklch(0.6368 0.2078 25.3313)", desc: "Error/warning red"}
        border: {val: "oklch(0.9276 0.0058 264.5313)", desc: "Border color"}

      dark:
        background: {val: "oklch(0.2046 0 0)", desc: "Dark background"}
        foreground: {val: "oklch(0.9219 0 0)", desc: "Light text"}
        primary: {val: "oklch(0.6231 0.1880 259.8145)", desc: "Same primary (works in dark)"}
        card: {val: "oklch(0.2686 0 0)", desc: "Elevated surface"}
        muted: {val: "oklch(0.2393 0 0)", desc: "Darker gray"}
        accent: {val: "oklch(0.3791 0.1378 265.5222)", desc: "Darker accent"}
        border: {val: "oklch(0.3715 0 0)", desc: "Subtle border"}

    typography:
      fonts:
        sans: {val: "Afacad, ui-sans-serif, sans-serif, system-ui", usage: "Headings and body text"}
        serif: {val: "Alice, ui-serif, serif", usage: "Emphasis and quotes"}
        mono: {val: "Courier Prime, ui-monospace, monospace", usage: "Code blocks"}

    spacing:
      radius: {val: "0.375rem", desc: "Base border radius (6px)"}
      spacing: {val: "0.25rem", desc: "Base spacing unit (4px)"}

    shadows:
      sm: {val: "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)"}
      md: {val: "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)"}
      lg: {val: "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)"}
      xl: {val: "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)"}

  components:
    # Shadcn/ui components customized with Tweakcn
    Button:
      variants: [default, destructive, outline, secondary, ghost, link]
      sizes: [default, sm, lg, icon]
      accessibility: "WCAG AA compliant with keyboard navigation"

    Card:
      parts: [Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter]
      usage: "Project cards and case study sections"

    ScrollArea:
      purpose: "Smooth scrolling for long content sections"
      implementation: "Radix UI ScrollArea primitive"

    Separator:
      usage: "Visual separation between sections"

    # Custom components
    Header:
      parts: [logo, navigation, theme toggle]
      responsive: "Mobile-first with collapsible navigation"

    Footer:
      content: "Copyright and social links"

    CaseStudyLayout:
      structure: "Metadata → Problem → Understanding → Solution → Impact"
      navigation: "Back to home link"

    ProjectCard:
      displays: [title, tagline, skills, category]
      interaction: "Click to navigate to case study"

  dark_mode:
    implementation: "next-themes"
    options: [light, dark, system]
    storage: "localStorage"
    toggle: "Header component with sun/moon icons"

# Architecture - React SPA with file-based routing
arch:
  type: "Single Page Application"
  stack:
    <<: *tech-stack
    architecture: "Component-based React architecture with client-side routing"
    build_tool: "Vite 5"
    styling: "Tailwind CSS 3 + Custom OKLCH design system"
    components: "Shadcn/ui (Radix UI primitives)"
    deployment: "GitHub Actions → GitHub Pages"

  patterns:
    - "React 18 functional components with hooks"
    - "TypeScript strict mode throughout"
    - "Component composition over inheritance"
    - "CSS custom properties for theming"
    - "OKLCH color space for perceptual uniformity"
    - "Mobile-first responsive design"
    - "Accessibility-first (WCAG 2.1 AA)"
    - "File-based content management"
    - "Type-safe props and content"

  routing:
    library: "React Router v6"
    mode: "Browser history"
    routes:
      - path: "/"
        component: "Home"
        sections: [Hero, About, FeaturedProjects]
      - path: "/docusearch"
        component: "Docusearch"
        structure: "Case study with Problem → Understanding → Solution → Impact"
      - path: "/context-kit"
        component: "ContextKit"
        structure: "Case study with Problem → Understanding → Solution → Impact"
      - path: "/kanban"
        component: "Kanban"
        structure: "Case study with Problem → Understanding → Solution → Impact"

  content_management:
    approach: "Type-safe TypeScript content files"
    location: "src/content/"
    structure:
      - "Case study data in TypeScript"
      - "Type definitions for all content"
      - "Centralized project metadata"
    benefits: [Type safety, Version control, IDE autocomplete, No CMS overhead]

# Deployment - GitHub Pages with custom domain
deployment:
  platform: "GitHub Pages"
  domain: "tucker.sh"
  workflow: ".github/workflows/deploy.yml"

  process:
    trigger: "Push to main branch"
    steps:
      - "Checkout code"
      - "Setup Node.js 18"
      - "Install dependencies (npm ci)"
      - "Build production bundle (npm run build)"
      - "Upload dist/ artifact"
      - "Deploy to GitHub Pages"

  build_output:
    directory: "dist/"
    bundle_size: "142KB gzipped"
    optimization: "Vite production build with code splitting"

  dns:
    record_type: "CNAME"
    source: "tucker.sh"
    target: "GitHub Pages"
    file: "public/CNAME"

# Development workflow
ops:
  development:
    start: "npm run dev"
    url: "http://localhost:5173"
    hmr: "Hot Module Replacement enabled"

  build:
    command: "npm run build"
    output: "dist/"
    type_check: "TypeScript compilation first"

  preview:
    command: "npm run preview"
    desc: "Preview production build locally"

  lint:
    command: "npm run lint"
    tools: "ESLint with TypeScript and React plugins"

  content_updates:
    case_studies: "Edit src/content/case-studies/*.ts"
    projects: "Update src/content/projects.ts"
    work_history: "Modify src/content/work-history.ts"
    types: "Define in src/content/types.ts"

  design_tokens:
    file: "src/styles/tweakcn.css"
    format: "CSS custom properties"
    color_space: "OKLCH for perceptual uniformity"
    theme_toggle: "Automatic light/dark mode switching"

# Performance
performance:
  bundle:
    size: "142KB gzipped"
    splitting: "Vite automatic code splitting"
    lazy_loading: "React.lazy for route components"

  optimization:
    images: "Optimized assets"
    fonts: "System fonts + Google Fonts subset"
    css: "Tailwind purge unused styles"
    js: "Vite production minification"

  metrics:
    target: "Fast load times on mobile and desktop"
    strategy: "Minimal dependencies, optimized builds"

# Browser support
browser_support:
  modern: "Chrome, Firefox, Safari, Edge (last 2 versions)"
  mobile: "iOS Safari, Chrome Mobile"
  features: "ES2020, CSS Grid, CSS Custom Properties, OKLCH colors"

# Accessibility
accessibility:
  compliance: "WCAG 2.1 AA"
  components: "Radix UI primitives (accessible by default)"
  keyboard: "Full keyboard navigation support"
  screen_reader: "Proper ARIA labels and semantic HTML"
  color_contrast: "Meets 4.5:1 ratio for normal text"
  theme: "Dark mode for reduced eye strain"

# Semantic context for AI consumption
semantic:
  ~portfolio_website: "Professional portfolio showcasing product design work"
  ~case_study_driven: "Three detailed case studies: DocuSearch, Context Kit, Kanban"
  ~dual_interface_focus: "Design pattern across projects: human + AI interfaces"
  ~agx_research: "Agent Experience (AGx) design methodology"
  ~oklch_colors: "Perceptually uniform OKLCH color space implementation"
  ~tweakcn_design: "Custom design system built on Shadcn/ui and Tailwind"
  ~production_deployed: "Live at tucker.sh via GitHub Pages"
  ~typescript_strict: "Full type safety throughout application"
  ~accessible_first: "WCAG 2.1 AA compliant components and design"
  ~mobile_responsive: "Mobile-first responsive design approach"
  ~dark_mode: "System-aware dark mode with manual toggle"

# Project evolution notes
notes:
  # Initial release (2025-10-22)
  - "PRODUCTION DEPLOYED: Portfolio site live at tucker.sh"
  - "CASE STUDIES COMPLETE: DocuSearch, tkr-context-kit, and TaskBoardAI case studies fully implemented"
  - "DESIGN SYSTEM: Tweakcn CSS with OKLCH color space for perceptual uniformity"
  - "COMPONENT LIBRARY: 19 components built with Shadcn/ui and Radix UI primitives"
  - "DARK MODE: Full dark mode support with system preference detection"
  - "DEPLOYMENT: Automated GitHub Actions workflow deploying to GitHub Pages"
  - "CUSTOM DOMAIN: tucker.sh configured and operational"
  - "BUNDLE SIZE: Production build optimized to 142KB gzipped"
  - "ACCESSIBILITY: WCAG 2.1 AA compliance with Radix UI accessible components"
  - "TYPE SAFETY: TypeScript strict mode across all 34 source files"
  - "CONTENT MANAGEMENT: File-based content system with TypeScript type definitions"
  - "RESPONSIVE DESIGN: Mobile-first approach with Tailwind CSS breakpoints"

  # Design decisions
  - "OKLCH COLOR SPACE: Chosen for perceptually uniform colors across light/dark modes"
  - "SHADCN/UI: Selected for accessible, customizable components built on Radix UI"
  - "REACT ROUTER: Client-side routing for smooth navigation between case studies"
  - "VITE: Fast build tool with excellent DX and production optimization"
  - "FILE-BASED CONTENT: TypeScript content files for type safety and version control"
  - "GITHUB PAGES: Cost-effective hosting with custom domain support"

  # Future enhancements
  - "Consider adding blog section for design articles"
  - "Potential animation enhancements with Framer Motion"
  - "Analytics integration for visitor insights"
  - "Additional case studies as projects complete"
  - "Performance monitoring and optimization"
