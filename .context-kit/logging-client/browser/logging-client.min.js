/**
 * TKR Browser Logging Client - Minified Version
 * Intercepts console methods with perfect passthrough while logging to backend
 */
!function(){"use strict";if(window.TkrLogging&&window.TkrLogging._initialized)return;const e={endpoint:"http://localhost:42003/api/logs/batch",batchSize:10,flushInterval:5e3,captureErrors:!0,sessionTracking:!0,performanceThreshold:1,enabled:!0,service:"browser",component:"browser-console"},t={log:"INFO",info:"INFO",warn:"WARN",error:"ERROR",debug:"DEBUG",trace:"DEBUG"};class s{constructor(){this.config={...e},this.sessionManager=null,this.batchSender=null,this.originalConsole={},this.enabled=!1,this.performanceStats={calls:0,totalTime:0,avgTime:0,disabled:!1},this.init=this.init.bind(this),this.log=this.log.bind(this),this.flush=this.flush.bind(this),this.enable=this.enable.bind(this),this.disable=this.disable.bind(this)}init(e={}){if(this.config={...this.config,...e},!this.config.enabled)return;try{if(!window.SessionManager)return void console.warn("TkrLogging: SessionManager not available");if(this.sessionManager=new window.SessionManager,this.sessionManager.initialize(),!window.BatchSender)return void console.warn("TkrLogging: BatchSender not available");this.batchSender=new window.BatchSender({endpoint:this.config.endpoint,batchSize:this.config.batchSize,flushInterval:this.config.flushInterval,performanceThreshold:this.config.performanceThreshold}),this.interceptConsole(),this.config.captureErrors&&this.setupErrorCapture(),this.enabled=!0,this.sendLogDirectly("INFO","TkrLogging client initialized",{config:{...this.config,endpoint:"[redacted]"},sessionId:this.sessionManager.getSessionId()})}catch(e){console.error("TkrLogging: Failed to initialize:",e)}}interceptConsole(){["log","info","warn","error","debug","trace"].forEach(e=>{if("function"==typeof console[e]){this.originalConsole[e]=console[e];const t=this.originalConsole[e];console[e]=(...s)=>{const i=performance.now();t.apply(console,s),this.enabled&&!this.performanceStats.disabled&&this.handleConsoleCall(e,s);const n=performance.now();this.updatePerformanceStats(n-i)}}})}handleConsoleCall(e,s){const i=s.map(e=>{if("string"==typeof e)return e;if(e instanceof Error)return`${e.name}: ${e.message}\n${e.stack}`;try{return JSON.stringify(e,null,2)}catch(t){return String(e)}}).join(" "),n=this.getStackTrace(),o={level:t[e]||"INFO",message:i.slice(0,1e4),service:this.config.service,component:this.config.component,sessionId:this.sessionManager?this.sessionManager.getSessionId():null,metadata:{source:"console",method:e,argCount:s.length,stack:n,url:window.location.href,userAgent:navigator.userAgent,timestamp:Date.now()}};this.batchSender&&this.batchSender.add(o)}sendLogDirectly(e,t,s={}){if(!this.enabled||!this.batchSender)return;const i={level:e,message:t,service:this.config.service,component:this.config.component,sessionId:this.sessionManager?this.sessionManager.getSessionId():null,metadata:{source:"client",url:window.location.href,timestamp:Date.now(),...s}};this.batchSender.add(i)}setupErrorCapture(){window.addEventListener("error",e=>{if(!this.enabled)return;const t={level:"ERROR",message:`Uncaught Error: ${e.message}`,service:this.config.service,component:this.config.component,sessionId:this.sessionManager?this.sessionManager.getSessionId():null,metadata:{source:"global-error",filename:e.filename,lineno:e.lineno,colno:e.colno,stack:e.error?e.error.stack:null,url:window.location.href,timestamp:Date.now()}};this.batchSender&&this.batchSender.add(t)}),window.addEventListener("unhandledrejection",e=>{if(!this.enabled)return;const t=e.reason;let s="Unhandled Promise Rejection",i=null;t instanceof Error?(s=`Unhandled Promise Rejection: ${t.message}`,i=t.stack):s=`Unhandled Promise Rejection: ${String(t)}`;const n={level:"ERROR",message:s,service:this.config.service,component:this.config.component,sessionId:this.sessionManager?this.sessionManager.getSessionId():null,metadata:{source:"unhandled-rejection",reason:"object"==typeof t?JSON.stringify(t):String(t),stack:i,url:window.location.href,timestamp:Date.now()}};this.batchSender&&this.batchSender.add(n)})}getStackTrace(){try{throw new Error}catch(e){return e.stack.split("\n").slice(3).join("\n")}}updatePerformanceStats(e){this.performanceStats.calls++,this.performanceStats.totalTime+=e,this.performanceStats.avgTime=this.performanceStats.totalTime/this.performanceStats.calls,this.performanceStats.avgTime>this.config.performanceThreshold&&(this.performanceStats.disabled=!0,console.warn(`TkrLogging: Performance threshold exceeded (${this.performanceStats.avgTime.toFixed(2)}ms avg), disabling logging`))}log(e,t,s={}){if(!this.enabled)return;const i={level:e.toUpperCase(),message:String(t).slice(0,1e4),service:this.config.service,component:this.config.component,sessionId:this.sessionManager?this.sessionManager.getSessionId():null,metadata:{source:"manual",url:window.location.href,timestamp:Date.now(),...s}};this.batchSender&&this.batchSender.add(i)}async flush(){this.batchSender&&await this.batchSender.flush(!0)}disable(){this.enabled=!1,this.sendLogDirectly("INFO","TkrLogging client disabled")}enable(){this.performanceStats.disabled?console.warn("TkrLogging: Cannot enable, performance threshold exceeded"):(this.enabled=!0,this.sendLogDirectly("INFO","TkrLogging client enabled"))}getStats(){return{enabled:this.enabled,performance:this.performanceStats,session:this.sessionManager?this.sessionManager.getSessionMetadata():null,batch:this.batchSender?this.batchSender.getStats():null}}restore(){Object.keys(this.originalConsole).forEach(e=>{this.originalConsole[e]&&(console[e]=this.originalConsole[e])}),this.batchSender&&this.batchSender.destroy(),this.enabled=!1,this.sendLogDirectly("INFO","TkrLogging client restored original console")}}const i=new s;window.TkrLogging={init:i.init,log:i.log,flush:i.flush,disable:i.disable,enable:i.enable,getStats:()=>i.getStats(),restore:()=>i.restore(),_initialized:!0,_client:i},("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname||window.location.search.includes("tkr_logging=true")||"true"===localStorage.getItem("tkr_logging_enabled"))&&setTimeout(()=>{window.SessionManager&&window.BatchSender&&window.TkrLogging.init()},100)}();