/**
 * Unified database schema for tkr-context-kit v2.0
 * Combines entities, relations, logs, and search index into a single optimized schema
 */
import { Migration } from './types.js';
export declare const CURRENT_SCHEMA_VERSION = 1;
export declare const SCHEMA_SQL = "\n-- ============================================================================\n-- CORE ENTITIES TABLE\n-- ============================================================================\n-- Central storage for all entities in the knowledge graph\nCREATE TABLE IF NOT EXISTS entities (\n  id TEXT PRIMARY KEY,\n  type TEXT NOT NULL,\n  name TEXT NOT NULL,\n  data JSON NOT NULL,\n  created_at INTEGER DEFAULT (unixepoch()),\n  updated_at INTEGER DEFAULT (unixepoch()),\n  version INTEGER DEFAULT 1,\n\n  -- Ensure reasonable constraints\n  CHECK (length(id) > 0),\n  CHECK (length(type) > 0),\n  CHECK (length(name) > 0),\n  CHECK (version >= 1)\n);\n\n-- ============================================================================\n-- RELATIONS TABLE\n-- ============================================================================\n-- Represents relationships between entities\nCREATE TABLE IF NOT EXISTS relations (\n  id TEXT PRIMARY KEY,\n  from_id TEXT NOT NULL,\n  to_id TEXT NOT NULL,\n  type TEXT NOT NULL,\n  properties JSON,\n  created_at INTEGER DEFAULT (unixepoch()),\n\n  -- Ensure valid relationships\n  CHECK (length(id) > 0),\n  CHECK (length(from_id) > 0),\n  CHECK (length(to_id) > 0),\n  CHECK (length(type) > 0),\n  CHECK (from_id != to_id), -- Prevent self-relations\n\n  -- Foreign key constraints\n  FOREIGN KEY (from_id) REFERENCES entities(id) ON DELETE CASCADE,\n  FOREIGN KEY (to_id) REFERENCES entities(id) ON DELETE CASCADE\n);\n\n-- ============================================================================\n-- SEARCH INDEX TABLE\n-- ============================================================================\n-- Optimized search table supporting multiple query patterns\nCREATE TABLE IF NOT EXISTS search_index (\n  entity_id TEXT PRIMARY KEY,\n  original_name TEXT NOT NULL,\n  normalized_name TEXT NOT NULL,      -- lowercase, no special chars\n  name_tokens TEXT NOT NULL,          -- space-separated tokens for token search\n  file_path TEXT,                     -- extracted from entity data\n  file_extension TEXT,                -- extracted extension (.tsx, .ts, etc.)\n  entity_type TEXT NOT NULL,\n  tags TEXT,                          -- space-separated keywords/tags\n  full_text TEXT NOT NULL,            -- concatenated searchable content\n  trigrams TEXT,                      -- for fuzzy matching\n  created_at INTEGER DEFAULT (unixepoch()),\n  updated_at INTEGER DEFAULT (unixepoch()),\n\n  -- Ensure valid search data\n  CHECK (length(entity_id) > 0),\n  CHECK (length(original_name) > 0),\n  CHECK (length(normalized_name) > 0),\n  CHECK (length(entity_type) > 0),\n\n  -- Foreign key constraint\n  FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE\n);\n\n-- ============================================================================\n-- LOG ENTRIES TABLE\n-- ============================================================================\n-- Unified logging for all services and components\nCREATE TABLE IF NOT EXISTS log_entries (\n  id TEXT PRIMARY KEY,\n  timestamp INTEGER NOT NULL,\n  level TEXT NOT NULL CHECK (level IN ('fatal', 'error', 'warn', 'info', 'debug', 'trace')),\n  service TEXT NOT NULL,\n  message TEXT NOT NULL,\n  metadata JSON,\n  process_id TEXT,\n  session_id TEXT,\n  trace_id TEXT,\n  created_at INTEGER DEFAULT (unixepoch()),\n\n  -- Ensure valid log data\n  CHECK (length(id) > 0),\n  CHECK (timestamp > 0),\n  CHECK (length(service) > 0),\n  CHECK (length(message) > 0)\n);\n\n-- ============================================================================\n-- SCHEMA MIGRATIONS TABLE\n-- ============================================================================\n-- Track applied database migrations\nCREATE TABLE IF NOT EXISTS schema_migrations (\n  version INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  applied_at INTEGER DEFAULT (unixepoch()),\n\n  CHECK (version >= 0)\n);\n\n-- ============================================================================\n-- OPTIMIZED INDEXES\n-- ============================================================================\n\n-- Entity indexes for common queries\nCREATE INDEX IF NOT EXISTS idx_entities_type ON entities(type);\nCREATE INDEX IF NOT EXISTS idx_entities_name ON entities(name);\nCREATE INDEX IF NOT EXISTS idx_entities_type_name ON entities(type, name);\nCREATE INDEX IF NOT EXISTS idx_entities_updated_at ON entities(updated_at);\nCREATE INDEX IF NOT EXISTS idx_entities_version ON entities(version);\n\n-- Relation indexes for graph traversal\nCREATE INDEX IF NOT EXISTS idx_relations_from_id ON relations(from_id);\nCREATE INDEX IF NOT EXISTS idx_relations_to_id ON relations(to_id);\nCREATE INDEX IF NOT EXISTS idx_relations_type ON relations(type);\nCREATE INDEX IF NOT EXISTS idx_relations_from_type ON relations(from_id, type);\nCREATE INDEX IF NOT EXISTS idx_relations_to_type ON relations(to_id, type);\nCREATE INDEX IF NOT EXISTS idx_relations_from_to ON relations(from_id, to_id);\n\n-- Search indexes for different query patterns\nCREATE INDEX IF NOT EXISTS idx_search_normalized_name ON search_index(normalized_name);\nCREATE INDEX IF NOT EXISTS idx_search_entity_type ON search_index(entity_type);\nCREATE INDEX IF NOT EXISTS idx_search_file_extension ON search_index(file_extension);\nCREATE INDEX IF NOT EXISTS idx_search_file_path ON search_index(file_path);\nCREATE INDEX IF NOT EXISTS idx_search_name_tokens ON search_index(name_tokens);\nCREATE INDEX IF NOT EXISTS idx_search_trigrams ON search_index(trigrams);\nCREATE INDEX IF NOT EXISTS idx_search_updated_at ON search_index(updated_at);\n\n-- Log indexes for filtering and aggregation\nCREATE INDEX IF NOT EXISTS idx_logs_timestamp ON log_entries(timestamp);\nCREATE INDEX IF NOT EXISTS idx_logs_level ON log_entries(level);\nCREATE INDEX IF NOT EXISTS idx_logs_service ON log_entries(service);\nCREATE INDEX IF NOT EXISTS idx_logs_level_service ON log_entries(level, service);\nCREATE INDEX IF NOT EXISTS idx_logs_timestamp_level ON log_entries(timestamp, level);\nCREATE INDEX IF NOT EXISTS idx_logs_process_id ON log_entries(process_id);\nCREATE INDEX IF NOT EXISTS idx_logs_session_id ON log_entries(session_id);\nCREATE INDEX IF NOT EXISTS idx_logs_trace_id ON log_entries(trace_id);\n\n-- ============================================================================\n-- TRIGGERS FOR AUTOMATIC MAINTENANCE\n-- ============================================================================\n\n-- Automatically update entity timestamps\nCREATE TRIGGER IF NOT EXISTS trg_entities_updated_at\nAFTER UPDATE ON entities\nFOR EACH ROW\nWHEN NEW.updated_at = OLD.updated_at\nBEGIN\n  UPDATE entities SET updated_at = unixepoch() WHERE id = NEW.id;\nEND;\n\n-- Automatically increment entity version on update\nCREATE TRIGGER IF NOT EXISTS trg_entities_version_increment\nAFTER UPDATE ON entities\nFOR EACH ROW\nWHEN NEW.version = OLD.version\nBEGIN\n  UPDATE entities SET version = OLD.version + 1 WHERE id = NEW.id;\nEND;\n\n-- Automatically maintain search index when entities change\nCREATE TRIGGER IF NOT EXISTS trg_search_index_entity_insert\nAFTER INSERT ON entities\nFOR EACH ROW\nBEGIN\n  INSERT INTO search_index (\n    entity_id,\n    original_name,\n    normalized_name,\n    name_tokens,\n    entity_type,\n    full_text,\n    updated_at\n  ) VALUES (\n    NEW.id,\n    NEW.name,\n    lower(NEW.name),\n    lower(replace(replace(NEW.name, '_', ' '), '-', ' ')),\n    NEW.type,\n    NEW.name || ' ' || NEW.type || ' ' || json_extract(NEW.data, '$'),\n    unixepoch()\n  );\nEND;\n\nCREATE TRIGGER IF NOT EXISTS trg_search_index_entity_update\nAFTER UPDATE ON entities\nFOR EACH ROW\nBEGIN\n  UPDATE search_index SET\n    original_name = NEW.name,\n    normalized_name = lower(NEW.name),\n    name_tokens = lower(replace(replace(NEW.name, '_', ' '), '-', ' ')),\n    entity_type = NEW.type,\n    full_text = NEW.name || ' ' || NEW.type || ' ' || json_extract(NEW.data, '$'),\n    updated_at = unixepoch()\n  WHERE entity_id = NEW.id;\nEND;\n\n-- ============================================================================\n-- USEFUL VIEWS FOR COMMON QUERIES\n-- ============================================================================\n\n-- Entity details with search information\nCREATE VIEW IF NOT EXISTS entity_details AS\nSELECT\n  e.id,\n  e.type,\n  e.name,\n  e.data,\n  e.created_at,\n  e.updated_at,\n  e.version,\n  si.file_path,\n  si.file_extension,\n  si.tags,\n  COUNT(r_out.id) as outgoing_relations,\n  COUNT(r_in.id) as incoming_relations\nFROM entities e\nLEFT JOIN search_index si ON e.id = si.entity_id\nLEFT JOIN relations r_out ON e.id = r_out.from_id\nLEFT JOIN relations r_in ON e.id = r_in.to_id\nGROUP BY e.id;\n\n-- Relation graph view\nCREATE VIEW IF NOT EXISTS relation_graph AS\nSELECT\n  r.id,\n  r.type as relation_type,\n  r.properties,\n  r.created_at,\n  e_from.name as from_name,\n  e_from.type as from_type,\n  e_to.name as to_name,\n  e_to.type as to_type\nFROM relations r\nJOIN entities e_from ON r.from_id = e_from.id\nJOIN entities e_to ON r.to_id = e_to.id;\n\n-- Log summary view for quick analytics\nCREATE VIEW IF NOT EXISTS log_summary AS\nSELECT\n  service,\n  level,\n  COUNT(*) as count,\n  MIN(timestamp) as first_occurrence,\n  MAX(timestamp) as last_occurrence,\n  ROUND(AVG(timestamp)) as avg_timestamp\nFROM log_entries\nGROUP BY service, level;\n\n-- Recent activity view\nCREATE VIEW IF NOT EXISTS recent_activity AS\nSELECT\n  'entity' as activity_type,\n  id,\n  name as activity_name,\n  type as activity_subtype,\n  updated_at as activity_timestamp\nFROM entities\nWHERE updated_at > unixepoch() - 86400 -- Last 24 hours\n\nUNION ALL\n\nSELECT\n  'relation' as activity_type,\n  id,\n  type as activity_name,\n  '' as activity_subtype,\n  created_at as activity_timestamp\nFROM relations\nWHERE created_at > unixepoch() - 86400 -- Last 24 hours\n\nUNION ALL\n\nSELECT\n  'log' as activity_type,\n  id,\n  service as activity_name,\n  level as activity_subtype,\n  timestamp as activity_timestamp\nFROM log_entries\nWHERE timestamp > unixepoch() - 86400 -- Last 24 hours\n\nORDER BY activity_timestamp DESC;\n";
export declare const MIGRATIONS: Migration[];
/**
 * Get the SQL for creating a specific table
 */
export declare function getTableSchema(tableName: string): string;
/**
 * Validate schema version compatibility
 */
export declare function validateSchemaVersion(version: number): boolean;
/**
 * Get all table names in the schema
 */
export declare function getTableNames(): string[];
/**
 * Get all index names for a specific table
 */
export declare function getTableIndexes(tableName: string): string[];
//# sourceMappingURL=schema.d.ts.map