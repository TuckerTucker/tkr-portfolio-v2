import { CaseStudyContent } from '../types'

export const contextKitCaseStudy: CaseStudyContent = {
  id: 'context-kit',
  title: 'tkr-context-kit',
  tagline: 'Designing Context Architecture for AI Agents',

  problem: {
    title: 'Agents Re-Discover Everything, Every Time',
    content: [
      'I created tkr-context-kit to solve a fundamental problem I was experiencing with AI agents: they were spending too much time in every conversation relearning my project structure and functionality.',
      '',
      'Working with AI agents on complex projects was frustrating. At the start of every conversation, they\'d need to:',
      '• Ask about project structure ("What directories exist?")',
      '• Inquire about component relationships ("How does UserProfile relate to AuthContext?")',
      '• Discover architectural patterns ("What\'s your state management approach?")',
      '• Learn operational procedures ("How do I run tests? Deploy changes?")',
      '',
      'This context discovery consumed 20-30% of every conversation. Worse, different agents would ask the same questions in different ways, getting slightly different answers, leading to inconsistent understanding.',
      '',
      'I needed a way to front-load context so agents could start working immediately with comprehensive, consistent project knowledge.',
    ],
  },

  understanding: {
    title: "Understanding the Agent's Perspective",
    content: [
      'These insights shaped the entire system design. I wasn\'t just documenting—I was creating an information architecture specifically optimized for AI agent consumption.',
    ],
    keyInsights: [
      'Hierarchical structure beats flat descriptions - Agents prefer YAML\'s indentation over JSON\'s brackets',
      'Semantic anchors reduce token usage - Define once, reference many times',
      'Progressive disclosure is valuable - Agents want to choose their context depth',
      'Explicit relationships matter - Don\'t make agents infer connections',
    ],
  },

  solution: {
    title: 'The _context-kit.yml Context Map',
    content: [
      'The breakthrough came when I developed the _context-kit.yml file structure. This became the core of everything—a comprehensive context map that gives AI agents immediate understanding of my project\'s architecture, design tokens, component relationships, and operational patterns.',
      '',
      'Key Design Principles:',
      '',
      '1. Semantic Anchors for Token Efficiency',
      'I discovered that agents were repeating similar context patterns, so the anchor system lets me define something like &tech-stack once and reference it multiple times without bloating token count. This reduced my _context-kit.yml from ~1000 lines to ~300 lines while maintaining full information.',
      '',
      '2. Semantic Definitions as Shared Vocabulary',
      'I realized agents were inferring conceptual relationships inconsistently. By explicitly defining terms like ~service_oriented and ~graceful_degradation, I\'m giving them a shared vocabulary that stays consistent across conversations. This is like creating a domain-specific language for my project that any agent can immediately understand.',
      '',
      '3. Progressive Disclosure of Information',
      'The structure supports different context depths:',
      '• Level 1 (Meta): Quick project overview',
      '• Level 2 (Tech Stack): Technology choices and patterns',
      '• Level 3 (Architecture): Component relationships and communication',
      '• Level 4 (Operations): Execution procedures and troubleshooting',
      '',
      'Agents consume what they need. Simple questions use Level 1-2. Complex refactoring dives into Level 3-4.',
      '',
      'The Broader Context-Kit System:',
      'The _context-kit.yml is the foundation, but the full context-kit includes a service-oriented architecture with unified React 19 dashboard (port 42001), knowledge graph backend API with SQLite+FTS5 storage (port 42003), centralized logging service, and MCP integration for persistent AI memory across sessions.',
      '',
      'I wanted modularity—the ability to enable or disable parts of the kit rather than managing a monolithic application. Services can operate independently but are orchestrated through the dashboard.',
    ],
    features: [
      'YAML-based context maps with semantic anchors and progressive disclosure',
      'Service-oriented architecture with independent, orchestrated modules',
      'Knowledge graph for relationship-based component understanding',
      'Agent specialization with parallel context updates',
      '_ref and _spec directories for AI-optimized documentation',
      'Automated context updates integrated into git workflow',
      '70% token reduction through semantic anchor system',
    ],
  },

  impact: {
    title: 'From Context Discovery to Immediate Work',
    content: [
      'What changed for agents:',
      'Conversations now start with full context. Agents understand project structure, architectural patterns, and operational procedures immediately. They spend time on actual work instead of asking clarifying questions.',
      '',
      'What changed for me:',
      'I can have productive conversations with agents immediately. No warmup period, no repeated explanations, no inconsistent understanding between different agents or conversations.',
      '',
      'This project represents exploration of a new design discipline: creating information architectures specifically for AI agent consumption.',
      '',
      'Traditional UX design principles apply—progressive disclosure, consistent mental models, reducing cognitive load—but the implementation details differ. Agents "read" hierarchical structures differently than people browse interfaces.',
      '',
      'The core insight: AI agents are users too. They deserve thoughtful UX design that considers their needs, preferences, and interaction patterns. When we design for agent efficiency while maintaining user accessibility, we enable new forms of people-AI collaboration.',
      '',
      'Key principles validated:',
      '1. Agents have preferences, not just requirements - Hierarchical > flat, Explicit > inferred, Files > databases',
      '2. Progressive disclosure works for agents too - Not every interaction needs full context depth',
      '3. Consistency matters more than you think - Canonical context prevents subtle decision differences',
      '4. Design with agents, not just for them - Best insights come from conversations with agents about their needs',
    ],
    metrics: [
      'Context loading reduced from 20-30% of conversation to near-zero',
      'YAML format reduces token usage by ~70% vs. verbose JSON',
      'Agents make fewer incorrect assumptions about project structure',
      'Parallel context updates keep documentation current automatically',
      'Service-oriented architecture enables modular toolkit management',
    ],
  },

  metadata: {
    role: 'Solo Designer, Developer & AGx Researcher',
    type: 'Open-source Development Toolkit',
    stack: [
      'TypeScript',
      'React 19',
      'ReactFlow',
      'SQLite + FTS5',
      'Node.js',
      'Vite',
      'YAML',
      'MCP SDK',
    ],
    skills: [
      'Agent Experience (AGx) research and design',
      'Information architecture for AI consumption',
      'Service-oriented architecture',
      'Progressive disclosure systems',
      'Semantic design patterns',
      'Multi-modal context management',
      'Full-stack development',
      'Knowledge graph design',
    ],
    year: '2024-2025',
    githubUrl: 'https://github.com/tuckertucker/tkr-context-kit',
  },
}
