import { BlogArticle } from '../types'

export const blogArticles: BlogArticle[] = [
  {
    id: '4',
    slug: 'docusearch-journey',
    title: 'Building DocuSearch: A Dual-Interface RAG System',
    description:
      'The story behind creating a documentation search system that serves both people and AI agents through thoughtfully designed dual interfaces.',
    content: [
      'I recently shared my experience building DocuSearch on LinkedIn, and the response was incredible. This project represents a significant step forward in my journey designing interfaces for both people and AI agents.',
      '',
      '## The Challenge',
      '',
      'Documentation search has always been a pain point for developers. We need quick, accurate answers without wading through endless pages. AI agents need the same thing, but in a structured format they can process efficiently.',
      '',
      'DocuSearch solves this by providing two interfaces to the same underlying RAG (Retrieval-Augmented Generation) system: a beautiful web UI for people and a clean MCP server for AI agents.',
      '',
      '## What I Learned',
      '',
      'This project taught me that dual-interface design isn\'t just about building two front-ends. It\'s about understanding the fundamental needs of each user type and creating an architecture that serves both elegantly.',
      '',
      'The web UI prioritizes visual feedback, context, and exploration. The MCP interface prioritizes structured responses, efficiency, and integration into agent workflows.',
      '',
      '## The Impact',
      '',
      'What excites me most is seeing how this pattern—dual interfaces serving different users through the same core system—can be applied to so many other problems in the AI space.',
    ],
    tags: ['DocuSearch', 'RAG', 'Dual Interface Design', 'MCP'],
    linkedinUrl: 'https://www.linkedin.com/posts/tuckerharleybrown_im-beyond-excited-to-share-docusearch-activity-7290099776324386816-NMbA',
    linkedinEmbed: 'https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:7386479647200456704?collapsed=1',
  },
  {
    id: '1',
    slug: 'designing-for-ai-agents',
    title: 'Designing Interfaces for AI Agents',
    description:
      'Exploring the unique challenges and opportunities in creating user experiences that serve both people and AI agents.',
    content: [
      'As AI agents become more prevalent in our digital workflows, we need to rethink how we design interfaces. Traditional UX patterns prioritize visual perception and interaction, but AI agents have fundamentally different needs.',
      '',
      '## The Dual Interface Challenge',
      '',
      'When designing for both people and AI agents, we face a unique challenge: these users have completely different interaction preferences. People need visual feedback, intuitive layouts, and contextual cues. AI agents need structured data, unambiguous schemas, and efficient APIs.',
      '',
      'The solution isn\'t to create two separate systems. Instead, we can design unified architectures where the same underlying data serves both user types through different interfaces.',
      '',
      '## Key Principles',
      '',
      '**1. Data Structure First**',
      'Start with well-defined data structures that can be easily parsed by AI agents. Use TypeScript interfaces, JSON schemas, or similar approaches to create unambiguous data models.',
      '',
      '**2. Visual Layer as Enhancement**',
      'Build the visual interface as a layer on top of structured data, not as the primary source of truth. This ensures AI agents can work directly with the data while people get rich visual feedback.',
      '',
      '**3. API-Driven Design**',
      'Expose operations through clear APIs that both your UI and AI agents can use. This creates consistency and makes the system easier to reason about.',
      '',
      '## Real-World Application',
      '',
      'In my TaskBoardAI project, I applied these principles by using JSON files for task storage. The web UI provides drag-and-drop kanban boards for people, while AI agents interact through file operations and MCP tools. Both work with identical data, but through interfaces optimized for their needs.',
      '',
      'This dual-interface approach isn\'t just theoretical—it\'s a practical pattern for building systems that leverage both people\'s creativity and AI efficiency.',
    ],
    tags: ['AI UX', 'Design Systems', 'People-AI Collaboration'],
  },
  {
    id: '2',
    slug: 'file-based-architectures',
    title: 'Why File-Based Architectures Work for AI',
    description:
      'Exploring the benefits of file-based data storage when building tools that AI agents will use.',
    content: [
      'When building developer tools that AI agents will interact with, choosing the right data persistence approach is crucial. File-based architectures offer unique advantages for people-AI collaboration.',
      '',
      '## The Case for Files',
      '',
      'Files provide a common language that both people and AI agents understand intuitively. When I built TaskBoardAI, I chose JSON files over a database, and this decision proved transformative for how AI agents interact with the system.',
      '',
      '## Benefits',
      '',
      '**Version Control Integration**',
      'Files work seamlessly with git, giving you full history of changes. You can track not just what changed, but when and why.',
      '',
      '**Natural for AI Agents**',
      'AI agents are trained on code repositories and documentation—they\'re already experts at working with files. File operations feel more natural to them than database queries.',
      '',
      '**No Setup Required**',
      'Unlike databases, files require no installation, configuration, or connection management. This reduces friction for both development and deployment.',
      '',
      '**Transparent and Debuggable**',
      'You can open a file in any text editor to see exactly what\'s stored. This transparency makes debugging straightforward and builds trust in the system.',
      '',
      '## Trade-offs',
      '',
      'File-based architectures aren\'t always the right choice. They work best when:',
      '- Data volume is moderate (hundreds to thousands of records, not millions)',
      '- Concurrent write operations are infrequent',
      '- Version control integration adds value',
      '- AI agent interaction is a primary use case',
      '',
      'For high-concurrency scenarios or massive datasets, traditional databases still make more sense. The key is matching the architecture to your specific requirements.',
    ],
    tags: ['Architecture', 'AI Tools', 'Developer Experience'],
  },
  {
    id: '3',
    slug: 'mcp-integration-patterns',
    title: 'Model Context Protocol: Patterns and Practices',
    description:
      'Practical patterns for integrating MCP into your applications to enable natural AI agent collaboration.',
    content: [
      'The Model Context Protocol (MCP) transforms how AI agents interact with your applications. Instead of explaining your system\'s structure in every prompt, MCP provides automatic context that makes collaboration feel natural.',
      '',
      '## What MCP Solves',
      '',
      'Before MCP, working with AI agents required constant explanation. You\'d need to specify data structures, explain operations, and provide examples for every interaction. MCP eliminates this friction by giving agents direct access to your system\'s capabilities.',
      '',
      '## Integration Patterns',
      '',
      '**1. Tool-Based Operations**',
      'Define tools that expose your system\'s core operations. Each tool should be focused on a single responsibility and provide clear parameters.',
      '',
      '```typescript',
      'server.setRequestHandler(ListToolsRequestSchema, async () => ({',
      '  tools: [',
      '    {',
      '      name: "create_card",',
      '      description: "Create a new task card",',
      '      inputSchema: {',
      '        type: "object",',
      '        properties: {',
      '          title: { type: "string" },',
      '          description: { type: "string" },',
      '          columnId: { type: "string" }',
      '        }',
      '      }',
      '    }',
      '  ]',
      '}));',
      '```',
      '',
      '**2. Resource Exposure**',
      'Provide resources that agents can read to understand current state. Think of these as read-only endpoints that give context.',
      '',
      '**3. Prompt Enhancement**',
      'Use prompts to guide agent behavior when interacting with your system. This is where you encode your domain expertise.',
      '',
      '## Real-World Results',
      '',
      'In TaskBoardAI, MCP integration changed the interaction model completely. Before MCP: "Create a JSON file with fields: title (string), description (string)..." After MCP: "Add a card for fixing the authentication bug." The agent handles all the details.',
      '',
      'This reduction in friction makes AI collaboration feel less like programming and more like conversation with a knowledgeable colleague.',
    ],
    tags: ['MCP', 'AI Integration', 'Developer Tools'],
  },
]
